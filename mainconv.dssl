<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL Style Sheet//EN" 
[
 <!ENTITY common SYSTEM "common.dssl">
 <!ENTITY encmap SYSTEM "koi8-r.dsssl">
]>
<style-sheet>
<style-specification>
<style-specification-body>

&common;

<![CDATA[

(define use-passport #t)
(define hilite-names '())
(define leading-pictures '())
(define inline-pictures '())
(define trailing-pictures '())

(define (build-meta-tags nl)
  (let ((titlenode (q-element '(fileDesc titleStmt title) nl))
        (authornode (q-element '(fileDesc titleStmt author) nl))
        (seriestitle (q-element '(fileDesc seriesStmt title) nl)))
    (let ((maintitle (select-elements titlenode '(title (type "main")))))
      (let ((titlestr (data (if (node-list-empty? maintitle) titlenode maintitle))))
        (make sequence
          (make element gi: "title"
                (literal (data seriestitle) ". " (abbreviate-name authornode) ". " titlestr))
          (meta-tag "DC.creator" (q-element '(fileDesc titleStmt principal) nl))
          (meta-tag "DC.publisher" (q-element '(fileDesc publicationStmt publisher) nl))
          (meta-tag "DC.rights" (q-element '(fileDesc publicationStmt availability) nl)))))))

(define (build-images imlist)
  (let loop ((list imlist) (obj (empty-sosofo)))
    (if (null? imlist)
        obj
        (loop (cdr imlist) (sosofo-append obj 
                                          (make empty-element gi: "img"
                                                attributes: `(("src" ,(string-append "/images/figures/" (caar imlist)))
                                                              ("alt" ,(cdar imlist))
                                                              ("align" "right"))))))))
                                                               

(define (kind-descr)
  (let ((kind (let ((class (q-element '(textClass catRef (scheme "kind")))))
                (node-list-reduce class (lambda (v k) (get-ref-data "target" k)) #f))))
    (if kind (literal kind) #f)))

(define (datestr nl)
  (let ((prefix (case (attribute-string "certainty" nl)
                  (("ca") "около ")
                  (("before") "до ")
                  (("after") "после ")
                  (else "")))
        (val (data nl)))
    (if (string=? val "") 
        ""
        (string-append prefix val " г."))))

(define (build-passport-items)
  (define (mkrow name val)
    (if (not val)
        (empty-sosofo)
        (make element gi: "tr"
              (make element gi: "td"
                    attributes: '(("valign" "top"))
                    (make element gi: "strong"
                          (literal name ":")))
              (make element gi: "td"
                    attributes: '(("valign" "top"))
                    val))))
  (make sequence
    (mkrow "Цит.по." (make sequence
                       (literal (string-append
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull titleStmt title))) ". "
                                 (let ((editor (data (q-element '(teiHeader fileDesc sourceDesc biblFull titleStmt editor)))))
                                   (if (string=? editor "") "" (string-append "Ред. " editor ". ")))
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull publicationStmt pubPlace)))
                                 ", "
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull publicationStmt publisher)))
                                 ", "
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull publicationStmt date)))
                                 ". "
                                 (let ((series (data (q-element '(teiHeader fileDesc sourceDesc biblFull seriesStmt title)))))
                                 (if (string=? series "") "" (string-append "(" series "). ")))
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull notesStmt)))))
                       (let ((distrib (q-element '(teiHeader fileDesc sourceDesc biblFull publicationStmt distributor))))
                         (if (node-list-empty? distrib)
                             (empty-sosofo)
                             (make sequence
                               (literal " [")
                               (process-node-list (children distrib))
                               (literal "]"))))))
    (mkrow "Первая публикация" (let ((orig (q-element '(teiHeader fileDesc sourceDesc biblFull sourceDesc biblFull))))
                                  (if (node-list-empty? orig) 
                                      #f
                                      (make sequence
                                        (literal (data (q-element '(titleStmt title) orig)))
                                        (make element gi: "strong"
                                              (literal " в: "))
                                        (literal (data (q-element '(publicationStmt publisher) orig)))
                                        (literal ", ")
                                        (literal (datestr (q-element '(publicationStmt date) orig)))))))
    (mkrow "Первая постановка" (let ((perf (q-element '(performance p date))))
                                  (if (node-list-empty? perf)
                                      #f
                                      (literal (datestr perf)))))
    (mkrow "Лит.род." (kind-descr))
    (mkrow "Год написания" (literal-or-none (datestr (q-element '(profileDesc creation date)))))
    (mkrow "Место написания" (literal-or-none (data (q-element '(profileDesc creation name (type "place"))))))
    (mkrow "Метрическая схема" (map-attr-href "/cgi-bin/results.cgi?mscheme=" "met"
                                     (descendants-with-attr "met")))
    (mkrow "Рифмовка" (map-attr-href "/cgi-bin/results.cgi?rhyme=" "rhyme"
                                     (descendants-with-attr "rhyme")))
    (mkrow "Адресат" (map-attr-href "/cgi-bin/results.cgi?addressee=" "value"
                                 (q-element '(span (type "addressee")) (current-node))))
    (mkrow "Темы" (map-attr-href "/cgi-bin/results.cgi?theme=" "value"
                                 (q-element '(span (type "theme")) (current-node))))))
  

(define (list-of-topics nl)
  (list-of-attrs "value" (q-element '(span (type "theme")) nl)))

(element tei.2 (make sequence
                 (make document-type
                   name: "html"
                   public-id: "-//W3C//DTD HTML 4.01 Transitional//EN")
                 (make element gi: "html"
                       (make element gi: "head"
                             (make formatting-instruction data: "\carriage-return;<!-- -head -->\carriage-return;")
                             (build-meta-tags (select-elements (children (current-node)) 'teiHeader))
                             (make empty-element gi: "meta"
                                   attributes: `(("name" "DC.keywords")
                                                 ("content" ,(list-of-topics (current-node)))))
                             (make formatting-instruction data: "\carriage-return;<!-- +middle -->\carriage-return;"))
                       (make element gi: "body"
                             (make formatting-instruction data: "\carriage-return;<!-- -middle -->\carriage-return;")
                             (if use-passport
                                 (make element gi: "table"
                                       attributes: '(("class" "passport") ("align" "right"))
                                       (build-passport-items))
                                 (empty-sosofo))
                             (process-children)
                             (with-mode footer
                               (make sequence
                                 (ruled
                                  (process-node-list (q-element 'note)))))
                             (make formatting-instruction data: "\carriage-return;<!-- split -->\carriage-return;")
                             (make element gi: "div"
                                   attributes: '(("align" "right"))
                                   (literal "Логическая разметка: ")
                                   (emphstr (data (q-element '(teiHeader fileDesc titleStmt principal)))))
                             (make formatting-instruction data: "\carriage-return;<!-- +foot -->\carriage-return;")))))

(mode header
  (element teiHeader (process-children))
  (element fileDesc (process-children))
  (element titleStmt (make sequence
                       (make element gi: "title"
                             (process-first-descendant 'author)
                             (process-first-descendant 'title))
                       (process-first-descendant 'principal)))
  (element author (make sequence
                    (process-children-trim)
                    (literal ". ")))
  (element persName (process-children-trim))
  (element forename (literal (substring (data (current-node)) 0 1) ". "))
  (element surname (literal (data (current-node))))
  (element title (process-children))
  (element publicationStmt (process-children))
  (element principal (meta-tag "DC.creator"))
  (element publisher (meta-tag "DC.publisher"))
  (element distributor (meta-tag "DC.distributor"))
  (element availability (meta-tag "DC.rights"))
  (element p (process-children))
  (element name (process-children))
  (default (empty-sosofo)))

(define (show-metrical) (let ((met (attribute-string "met"))
                              (rhyme (attribute-string "rhyme")))
                          (if (and (not met) (not rhyme))
                              (process-children-nodata)
                              (make sequence
                                (if met
                                    (paragraph
                                     (make sequence
                                       (emphstr "Размер: ")
                                       (literal met)
                                       (process-children-nodata)))
                                    (empty-sosofo))
                                (if rhyme
                                    (paragraph
                                     (make sequence
                                       (emphstr "Схема рифмовки: ")
                                       (literal rhyme)
                                       (process-children-nodata)))
                                    (empty-sosofo))))))

(mode metrical
  (element div0 (show-metrical))
  (element lg (show-metrical))
  (element lg1 (show-metrical))
  (element lg2 (show-metrical))
  (element l (show-metrical))
  (default (process-children-nodata)))

; (mode footer
;   (element teiHeader (ruled
;                       (make sequence
;                         (process-matching-children 'profileDesc)
;                         (process-matching-children 'fileDesc))))
;   (element fileDesc (make sequence
;                       (process-matching-children 'sourceDesc)
;                       (process-matching-children 'publicationStmt 'notesStmt 'seriesStmt)                     
;                       (process-first-descendant 'principal)))
;   (element profileDesc (process-children))
;   (element creation (process-children))
;   (element (creation date) (make sequence
;                              (emphstr "Год написания: ")
;                              (process-children)))
;   (element (sourceDesc biblFull sourceDesc)  (paragraph (make sequence
;                                                           (emphstr "Первая публикация: ")
;                                                           (process-children))))
;   (element sourceDesc (paragraph (make sequence
;                                     (emphstr "Цит. по: ")
;                                     (process-children))))
;   (element titleStmt (process-children))
;   (element pubPlace (process-children))
;   (element biblFull (process-children))
;   (element publicationStmt (process-children))
;   (element notesStmt (process-children))
;   (element (notesStmt note) (process-children))
;   (element (biblFull publicationStmt) 
;     (make sequence
;       (process-matching-children 'pubPlace)
;       (process-matching-children 'publisher)
;       (process-matching-children 'date)
;       (process-matching-children 'distributor)))
;   (element publisher (paragraph (process-children)))
;   (element (biblFull publicationStmt publisher) (make sequence
;                                                   (process-children)
;                                                   (literal ", ")))
;   (element (biblFull publicationStmt pubPlace) (make sequence
;                                                  (process-children)
;                                                  (literal ", ")))
;   (element distributor (make sequence
;                          (literal "(")
;                          (process-children)
;                          (literal ")")))
;   (element editor (make sequence
;                     (literal "(ред. ")
;                     (process-children)
;                     (literal ")")))
;   (element availability (process-children))
;   (element (biblFull seriesStmt) (make sequence 
;                                    (literal " // ")
;                                    (process-children)))
;   (element seriesStmt (paragraph (process-children)))
;   (element title (make sequence 
;                    (process-children)
;                    (literal ". ")))
;   (element principal (paragraph
;                       (make sequence
;                         (emphstr "Ответственный за разметку: ")
;                         (process-children))))
;   (element note (if (have-ancestor? "teiHeader")
;                     (empty-sosofo)
;                     (paragraph
;                      (make sequence
;                        (let ((nid (number->string (element-number))))
;                          (make element 
;                            gi: "sup"
;                            (make element gi: "a"
;                                  attributes: `(("name" ,(string-append "note." nid))
;                                                ("href" ,(string-append "#anchor." nid)))
;                                  (literal nid))))
;                        (process-children)
;                        (case (attribute-string "resp")
;                          (("editor") (emphstr " (прим. ред.)"))
;                          (("author") (emphstr " (прим. автора)"))
;                          (else (empty-sosofo)))))))
;   (element textClass (process-children))
;   (element catRef (if (string=? (attribute-string "scheme") "KIND")
;                       (paragraph
;                        (make sequence
;                          (emphstr "Литературный род: ")
;                          (process-element-with-id (attribute-string "target"))))
;                       (empty-sosofo)))
;   (element span (case (attribute-string "type")
;                   (("theme") (paragraph 
;                              (make sequence
;                               (emphstr "Тема: ")
;                               (literal (attribute-string "value")))))
;                   (("addressee") (paragraph 
;                                  (make sequence
;                                    (emphstr "Адресат: ")
;                                    (literal (attribute-string "value")))))
;                   (else (empty-sosofo))))
;   (element category (process-children))
;   (element catDesc (process-children))
;   (element name (process-children)))

(mode footer
  (element note (if (equal? (attribute-string "place") "inline")
                    (empty-sosofo)
                    (paragraph
                     (make sequence
                       (let ((nid (number->string (element-number))))
                         (make element 
                           gi: "sup"
                           (make element gi: "a"
                                 attributes: `(("name" ,(string-append "note." nid))
                                               ("href" ,(string-append "#anchor." nid)))
                                 (literal nid))))
                       (process-children)
                       (case (attribute-string "resp")
                         (("editor") (emphstr " (прим. ред.)"))
                         (("author") (emphstr " (прим. автора)"))
                         (else (empty-sosofo))))))))


;(query (descendants-with-attr "corresp") (let ((prev (ipreced (current-node))))
;                                           (if (has-attribute? "corresp" prev)
;                                               (empty-sosofo)
;                                               (make element gi: "table"
;                                                     (map-constructor 

(element teiHeader (make sequence 
                     (build-images leading-pictures)
                     (process-first-descendant 'fileDesc)))
(element fileDesc (process-first-descendant 'titleStmt))
(element titleStmt (make sequence
                     (process-matching-children 'author)
                     (process-matching-children 'title)))
(element author (paragraph
                 (make element gi: "em")))
(element (author persName) (process-children))
(element forename (space-after))
(element surname (space-after))
(element title (header 1))
(element div0 (division))
(element div1 (division))
(element div2 (division))
(element div3 (division))
(element div (division))
(element head (header))
(element text (make sequence
                (build-images inline-pictures)
                (anchored #f #f)
                (build-images trailing-pictures)))
(element front (process-children))
(element body (anchored #f #f))
(element name (let ((contents (anchored #t #t)))
                (if (member (element-number (current-node)) hilite-names)
                    (make element gi: "span"
                          attributes: '(("class" "search"))
                          contents)
                    contents)))

(element add (make element gi: "small"))

(element lg1 (make element gi: "p"
                   attributes: '(("class" "poetry"))))
(element l (make sequence
             (process-children)
             (make empty-element gi: "br")))
(element p (if (and (have-ancestor? "sp") (first-sibling?))
               (process-children)
               (make element)))
(element q (make sequence
             (literal "\"")
             (process-children)
             (literal "\"")))
(element quote (make element gi: "em"))
(element cit (process-children))
(element (epigraph cit bibl) (make sequence
                               (make empty-element gi: "br")
                               (process-children)))
(element bibl (process-children))
(element salute (make element gi: "p"
                      attributes: '(("align" "center"))))
(element epigraph (make element gi: "p"
                      attributes: '(("align" "right"))))
(element (q lg) (make element gi: "blockquote"
                              (make sequence
                                (literal "\"")
                                (process-children)
                                (literal "\""))))
(element sp (make element gi: "p"))
(element speaker (make element gi: "strong"))
(element stage (case (attribute-string "type")
                 (("delivery") (make element gi: "em"))
                 (else (centered))))
(element move (empty-sosofo))
(element castList (make sequence
                    (process-first-descendant 'head)
                    (make element gi: "ul"
                          (process-matching-children 'castItem))))
(element (castList head) (header 2))
(element castItem (make element gi: "li"))
(element role (space-after (make element gi: "strong")))
(element roleDesc (process-children))
(element set (centered))
(element performance (empty-sosofo))
(element dateline (make element gi: "p"
                        attributes: '(("align" "right"))
                        (make element gi: "em")))

(element xref (make element gi: "a"
                    attributes: `(("href" ,(fsid->url (entity-generated-system-id (attribute-string "doc")))))))
(element figure (empty-sosofo))
(element date (literal (datestr (current-node))))
(element span (process-children))
(element emph (make element))
(element ref (process-children))
(element back (process-children))
(element trailer (make element gi: "p" attributes: '(("align" "center"))))
(element note (if (equal? (attribute-string "place") "inline")
                  (make element gi: "small"
                        (process-children))
                  (let ((nid (number->string (element-number))))
                    (make element 
                      gi: "sup"
                      (make element gi: "a"
                            attributes: `(("name" ,(string-append "anchor." nid))
                                          ("href" ,(string-append "#note." nid)))
                            (literal nid))))))
(default (node-list-error (string-append "Unknown element " (gi (current-node))) (current-node)))

]]>
</style-specification-body>
</style-specification>
</style-sheet>
