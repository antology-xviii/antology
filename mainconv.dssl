<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL Style Sheet//EN" 
[
 <!ENTITY common SYSTEM "common.dssl">
 <!ENTITY encmap SYSTEM "koi8-r.dsssl">
]>
<style-sheet>
<style-specification>
<style-specification-body>

&common;

<![CDATA[

(define use-passport #t)
(define hilite-names '())
(define leading-pictures '())
(define inline-pictures '())
(define trailing-pictures '())
(define current-file "")

(define (build-meta-tags nl)
  (let ((titlenode (q-element '(fileDesc titleStmt title) nl))
        (authornode (q-element '(fileDesc titleStmt author) nl))
        (seriestitle (q-element '(fileDesc seriesStmt title) nl)))
    (let ((maintitle (select-elements titlenode '(title (type "main")))))
      (let ((titlestr (data (if (node-list-empty? maintitle) titlenode maintitle))))
        (make sequence
          (make element gi: "title"
                (literal (data seriestitle) ". " (abbreviate-name authornode) ". " titlestr))
          (meta-tag "DC.creator" (q-element '(fileDesc titleStmt principal) nl))
          (meta-tag "DC.publisher" (q-element '(fileDesc publicationStmt publisher) nl))
          (meta-tag "DC.rights" (q-element '(fileDesc publicationStmt availability) nl)))))))

(define (build-images imlist)
   (if (null? imlist)
	(empty-sosofo)
    (let loop ((list imlist) (obj (empty-sosofo)))
      (if (null? list)
          obj
          (loop (cdr list) (sosofo-append obj 
                                          (make element gi: "tr"
                                                (make element gi: "td"
                                                      attributes: '(("align" "center") ("valign" "center"))
                                                      (make empty-element gi: "img"
                                                            attributes: `(("width" "220")
                                                                          ("src" ,(string-append "/images/figures/" (caar list)))
                                                                          ("alt" ,(cdar list))))
                                                      (make empty-element gi: "br")
                                                      (split-lines (cdar list))))))))))
                                                               
                                             
(define (kind-descr)
  (let ((kind (let ((class (q-element '(textClass catRef (scheme "kind")))))
                (node-list-reduce class (lambda (v k) (get-ref-data "target" k)) #f))))
    (if kind (literal kind) #f)))

(define (datestr nl)
  (let ((prefix (case (attribute-string "certainty" nl)
                  (("ca") "около ")
                  (("before") "до ")
                  (("after") "после ")
                  (else "")))
        (val (data nl)))
    (if (string=? val "") 
        ""
        (string-append prefix val " г."))))

(define (protect-specials str)
  (define (encode c) (case c
			((#\space) "@#32;")
			((#\() "@#40;")
			((#\)) "@#41;")
			((#\,) "@#44;")
			(else (string c))))
  (apply string-append (map encode (string->list str))))

(define (build-passport-items)
  (define (mkrow name val)
    (if (not val)
        (empty-sosofo)
        (make element gi: "tr"
              (make element gi: "td"
                    attributes: '(("valign" "top"))
                    (make element gi: "strong"
                          (literal name ":")))
              (make element gi: "td"
                    attributes: '(("valign" "top"))
                    val))))
  (make sequence
    (mkrow "Цит.по." (make sequence
                       (literal (string-append
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull titleStmt title))) ". "
                                 (let ((editor (data (q-element '(teiHeader fileDesc sourceDesc biblFull titleStmt editor)))))
                                   (if (string=? editor "") "" (string-append "Ред. " editor ". ")))
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull publicationStmt pubPlace)))
                                 ", "
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull publicationStmt publisher)))
                                 ", "
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull publicationStmt date)))
                                 ". "
                                 (let ((series (data (q-element '(teiHeader fileDesc sourceDesc biblFull seriesStmt title)))))
                                 (if (string=? series "") "" (string-append "(" series "). ")))
                                 (data (q-element '(teiHeader fileDesc sourceDesc biblFull notesStmt)))))
                       (let ((distrib (q-element '(teiHeader fileDesc sourceDesc biblFull publicationStmt distributor))))
                         (if (node-list-empty? distrib)
                             (empty-sosofo)
                             (make sequence
                               (literal " [")
                               (process-node-list (children distrib))
                               (literal "]"))))))
    (mkrow "Первая публикация" (let ((orig (q-element '(teiHeader fileDesc sourceDesc biblFull sourceDesc biblFull))))
                                  (if (node-list-empty? orig) 
                                      #f
                                      (make sequence
                                        (literal (data (q-element '(titleStmt title) orig)))
                                        (make element gi: "strong"
                                              (literal " в: "))
                                        (literal (data (q-element '(publicationStmt publisher) orig)))
                                        (literal ", ")
                                        (literal (datestr (q-element '(publicationStmt date) orig)))))))
    (mkrow "Первая постановка" (let ((perf (q-element '(performance p date))))
                                  (if (node-list-empty? perf)
                                      #f
                                      (literal (datestr perf)))))
    (mkrow "Лит.род." (kind-descr))
    (mkrow "Год написания" (literal-or-none (datestr (q-element '(profileDesc creation date)))))
    (mkrow "Место написания" (literal-or-none (data (q-element '(profileDesc creation name (type "place"))))))
    (mkrow "Метрическая схема" (map-attr-href "/cgi-bin/results.cgi?mscheme=" "met"
                                     (descendants-with-attr "met") protect-specials))
    (mkrow "Рифмовка" (map-attr-href "/cgi-bin/results.cgi?rhyme=" "rhyme"
                                     (descendants-with-attr "rhyme") protect-specials))
    (mkrow "Адресат" (map-attr-href "/cgi-bin/results.cgi?addressee=" "value"
                                 (q-element '(span (type "addressee")) (current-node))))
    (mkrow "Темы" (map-attr-href "/cgi-bin/results.cgi?theme=" "value"
                                 (q-element '(span (type "theme")) (current-node))))))
  

(define (list-of-topics nl)
  (list-of-attrs "value" (q-element '(span (type "theme")) nl)))

(element tei.2 (make sequence
                 (make document-type
                   name: "html"
                   public-id: "-//W3C//DTD HTML 4.01 Transitional//EN")
                 (make element gi: "html"
                       (make element gi: "head"
                             (make formatting-instruction data: "\carriage-return;<!-- -head -->\carriage-return;")
                             (build-meta-tags (select-elements (children (current-node)) 'teiHeader))
                             (make empty-element gi: "meta"
                                   attributes: `(("name" "DC.keywords")
                                                 ("content" ,(list-of-topics (current-node)))))
                             (make formatting-instruction data: "\carriage-return;<!-- +middle -->\carriage-return;"))
                       (make element gi: "body"
                             (make formatting-instruction data: "\carriage-return;<!-- -middle -->\carriage-return;")
                             (make element gi: "table"
                                   attributes: '(("align" "right") ("cellspacing" "20"))
                                   (if use-passport
                                       (make element gi: "tr"
                                             (make element gi: "td"
                                                   (make element gi: "table"
                                                         attributes: '(("class" "passport"))
                                                         (build-passport-items))))
                                       (empty-sosofo))
                                   (build-images leading-pictures)
                                   (build-images inline-pictures))
                             (process-children)
                             (make formatting-instruction data: "\carriage-return;<!-- split -->\carriage-return;")
                             (with-mode footer
                                 (process-node-list (q-element 'note)))
                             (make formatting-instruction data: "\carriage-return;<!-- split -->\carriage-return;")
                             (make element gi: "div"
                                   attributes: '(("align" "right"))
				   (make element gi: "a"
					attributes: `(("href" ,(string-append "/cgi-bin/structure.cgi/" (urlencode current-file 'path))))
                                        (literal "Логическая разметка текста: "))
                                   (emphstr (data (q-element '(teiHeader fileDesc titleStmt principal))))))
                             (make formatting-instruction data: "\carriage-return;<!-- +foot -->\carriage-return;"))))

(mode footer
  (element note (if (or (equal? (attribute-string "place") "inline") (have-ancestor? "notesStmt"))
                    (empty-sosofo)
                    (paragraph
                     (make sequence
                       (let ((nid (number->string (element-number))))
                         (make element 
                           gi: "sup"
                           (make element gi: "a"
                                 attributes: `(("name" ,(string-append "note." nid))
                                               ("href" ,(string-append "#anchor." nid)))
                                 (literal nid))))
                       (process-children)
                       (case (attribute-string "resp")
                         (("editor") (emphstr " (прим. ред.)"))
                         (("author") (emphstr " (прим. автора)"))
                         (else (empty-sosofo))))))))



(element teiHeader (process-first-descendant 'fileDesc))
(element fileDesc (process-first-descendant 'titleStmt))
(element titleStmt (make sequence
                     (process-matching-children 'author)
                     (process-matching-children 'title)))
(element author (paragraph
                 (make element gi: "em")))
(element (author persName) (process-children))
(element forename (space-after))
(element surname (space-after))
(element (bibl title) (make sequence
			(literal "\"")
			(process-children)
			(literal "\"")))
(element title (header 1))
(element div0 (division))
(element div1 (division))
(element div2 (division))
(element div3 (division))
(element div (division))
(element head (header))
(element text (make sequence
                (anchored #f #f)
                (if (null? trailing-pictures)
                    (empty-sosofo)
                    (make element gi: "table"
                          attributes: '(("align" "center"))
                          (build-images trailing-pictures)))))
(element front (process-children))
(element body (anchored #f #f))
(element name (let ((contents (anchored #t #t)))
                (if (member (element-number (current-node)) hilite-names)
                    (make element gi: "span"
                          attributes: '(("class" "search"))
                          contents)
                    contents)))

(element add (make element gi: "small"))
(element abbr (make sequence
                (process-children)
                (literal ". ")))

(mode definition-list
  (element item (make sequence
                  (make element gi: "dt"
                        (with-mode label-mode
                          (process-first-descendant 'label)))
                  (make element gi: "dd"
                        (with-mode #f
                          (process-children))))))

(mode bill-list
  (element (list head) (make element gi: "tr"
                             (make element gi: "th"
                                   attributes: '(("colspan" "2") ("align" "center")))))
  (element item (make element gi: "tr"
                      (make element gi: "td"
                            attributes: '(("valign" "top"))
                            (with-mode #f
                              (process-children))
                            (make empty-element gi: "hr"
                                  attributes: '(("class" "dotted"))))
                      (make element gi: "td"
                            attributes: '(("valign" "bottom"))
                            (with-mode label-mode
                              (process-first-descendant 'label))))))
                            

(mode simple-list-synced
  (element head (make element gi: "th"
                             attributes: '(("align" "center") ("valign" "top"))))
  (element item (make element gi: "td"
                      attributes: '(("valign" "top"))
                      (with-mode label-mode
                        (process-children)))))

(mode simple-list
  (element head (make element gi: "tr"
                             (make element gi: "th"
                                   attributes: '(("align" "center") ("valign" "top")))))
  (element item   (make element gi: "tr"
                        (make element gi: "td"
                              attributes: '(("valign" "top"))
                              (with-mode label-mode
                                (process-children))))))

(mode simple-list-sync
  (element head (let ((corr (attribute-string "corresp")))
                         (if corr
                             (make element gi: "tr"
                                   (make element gi: "th"
                                         attributes: '(("align" "center") ("valign" "top")))
                                   (with-mode simple-list-synced
                                     (process-element-with-id corr)))
                             (empty-sosofo))))
  (element item (let ((corr (attribute-string "corresp")))
                  (if corr  
                      (make element gi: "tr"
                            (make element gi: "td"
                                  attributes: '(("valign" "top"))
                                  (with-mode label-mode
                                    (process-children)))
                            (with-mode simple-list-synced
                              (process-element-with-id corr)))
                      (empty-sosofo)))))


(mode label-mode
  (element label (process-children)))
                  

(element item (make element gi: "li"))
(element label (empty-sosofo))
(element (list head) (make element gi: "p"
                           attributes: '(("align" "center"))))
(element list (case (attribute-string "type")
				(("ordered") (make sequence
                               (process-first-descendant '(list head))
                               (make element gi: "ol")))
				(("bulleted") (make sequence
                                (process-first-descendant '(list head))
                                (make element gi: "ul")))
                (("dialogue") (make sequence
                                (process-first-descendant '(list head))
                                (make element gi: "dl"
                                      (with-mode definition-list
                                        (process-children)))))
                (("bill") (make element gi: "table"
                               attributes: '(("class" "bill"))
                               (with-mode bill-list
                                 (process-children))))
                (("simple") (let ((myid (id)) 
                                  (corr (attribute-string "corresp")))
                               (cond
                                ((and myid (not (node-list-empty?
                                                 (select-elements (preced (current-node))
                                                                  `(list (corresp ,myid))))))
                                 (empty-sosofo))
                                (corr (make element gi: "table"
                                            (with-mode simple-list-sync
                                              (process-children))))
                                (else (make element gi: "table"
                                            (with-mode simple-list
                                              (process-children)))))))
                                      
				((#f) (node-list-error "List type missing" (current-node)))
				(else (node-list-error (string-append "Unknown list type " (attribute-string "type")) (current-node)))))

(element table (make element gi: "table"
							 attributes: '(("border" "1"))))

(element row (make element gi: "tr"))
(element cell (let* ((rowspan (attribute-string "rows"))
		     (attrs (if rowspan `(("rowspan" ,rowspan)) '())))
		(if (equal? "" (data (current-node)))
		(make element gi: "td"
			attributes: attrs
			(literal "\U-00A0"))
		(make element gi: "td"
			attributes: attrs))))	

(element lg (make element gi: "p"
                   attributes: '(("class" "poetry"))))
(element lg1 (make element gi: "p"
                   attributes: '(("class" "poetry"))))
(element lg2 (make element gi: "p"
                   attributes: '(("class" "poetry-indented"))))
(element l (make sequence
             (process-children)
             (make empty-element gi: "br")))
(element p (if (and (have-ancestor? "sp") (first-sibling?))
               (process-children)
               (make element)))

(element ab (process-children))

(element q (make sequence
             (literal "\"")
             (process-children)
             (literal "\"")))
(element quote (make element gi: "em"))
(element cit (process-children))
(element (epigraph cit bibl) (make sequence
                               (make empty-element gi: "br")
                               (process-children)))
(element bibl (process-children))
(element salute (make element gi: "p"
                      attributes: '(("align" "center"))))

(element signed (make element gi: "p"
                      attributes: '(("align" "right"))))

(element argument (make element gi: "p"
                        attributes: '(("align" "center"))
                        (make element gi: "em"
                              (process-children))))

(element epigraph (make element gi: "p"
                      attributes: '(("align" "right"))))
(element (q lg) (make element gi: "blockquote"
                              (make sequence
                                (literal "\"")
                                (process-children)
                                (literal "\""))))
(element sp (let ((corr (attribute-string "corresp")))
              (cond
               ((not corr) (make element gi: "p"))
               ((attribute-string "corresp" (ipreced (current-node)))
                (empty-sosofo))
               (else (let ((enrow (lambda () (make element gi: "tr"
                                                    (make element gi: "td" 
                                                          (process-node-list
                                                           (children
                                                            (current-node)))))))
                           (correls (select-elements (follow (current-node))
                                                     `(sp (corresp ,corr)))))
                       (let ((ncorr (+ 1 (node-list-length correls))))
                         (make element gi: "table"
                               attributes: '(("class" "correspondence"))
                               (make element gi: "tr"
                                     (make element gi: "td"
                                           (process-children))
                                     (make element gi: "td"
                                           attributes: `(("valign" "center") ("rowspan" ,(number->string ncorr)))
                                           (iterate-element 4 "big" (literal "}"))))
                               (map-constructor enrow correls))))))))

(element speaker (make element gi: "strong"
			(space-after)))
(element stage (case (attribute-string "type")
                 (("delivery") (make element gi: "em"))
                 (else (if (attribute-string "corresp" (ipreced (current-node)))
			   (make element gi: "span"
					attributes: '(("class" "correspondence"))
                           		(process-children))
                           (centered)))))
(element move (empty-sosofo))
(element castList (make sequence
                    (process-first-descendant 'head)
                    (make element gi: "ul"
                          (process-matching-children 'castItem))))
(element (castList head) (header 2))
(element castItem (make element gi: "li"))
(element role (space-after (make element gi: "strong")))
(element roleDesc (process-children))
(element set (centered))
(element performance (empty-sosofo))
(element dateline (make element gi: "p"
                        attributes: '(("align" "right"))
                        (make element gi: "em")))

(element xref (make element gi: "a"
                    attributes: `(("href" ,(fsid->url (entity-generated-system-id (attribute-string "doc")))))))
(element figure (empty-sosofo))
(element date (literal (datestr (current-node))))
(element span (process-children))
(element emph (make element gi: "em"))
(element term (make element gi: "strong"))
(element mentioned (make element gi: "em"))
(element soCalled (make element gi: "em"))
(element hi (make element gi: "em"))
(element ref (process-children))
(element back (process-children))
(element trailer (make element gi: "p" attributes: '(("align" "center"))))
(element note (if (equal? (attribute-string "place") "inline")
                  (make element gi: "small"
                        (process-children))
                  (let ((nid (number->string (element-number))))
                    (make element 
                      gi: "sup"
                      (make element gi: "a"
                            attributes: `(("name" ,(string-append "anchor." nid))
                                          ("href" ,(string-append "#note." nid)))
                            (literal nid))))))
(default (node-list-error (string-append "Unknown element " (gi (current-node))) (current-node)))

]]>
</style-specification-body>
</style-specification>
</style-sheet>
