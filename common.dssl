(declare-flow-object-class element "UNREGISTERED::James Clark//Flow Object Class::element")
(declare-flow-object-class empty-element "UNREGISTERED::James Clark//Flow Object Class::empty-element")
(declare-flow-object-class document-type "UNREGISTERED::James Clark//Flow Object Class::document-type")
(declare-flow-object-class formatting-instruction "UNREGISTERED::James Clark//Flow Object Class::formatting-instruction")

(declare-char-property external-code #f)
(declare-char-property url-safe #f)

(add-char-properties url-safe: #t 
                     #\a #\A #\b #\B #\c #\C #\d #\D #\e #\E #\f #\F
                     #\g #\G #\h #\i #\I #\k #\K #\l #\L #\m #\M
                     #\n #\N #\o #\O #\p #\P #\q #\Q #\r #\R #\s #\S
                     #\t #\T #\u #\U #\v #\V #\w #\W #\x #\X #\y #\Y
                     #\z #\Z #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9
                     #\- #\. #\_ #\~)

(add-char-properties url-safe: '(username hostname query fragment)
                     #\! #\$ #\& #\' #\( #\)
                     #\* #\+ #\, #\; #\=)

(add-char-properties url-safe: '(username path query fragment) #\:)

(add-char-properties url-safe: '(path query fragment)
                     #\/ #\@)
(add-char-properties url-safe: '(query fragment) #\?)

&encmap;

<![CDATA[

(declare-characteristic heading-level "UNREGISTERED::Andreev//Characteristic::testing" 1)

(define all-element-number
  (external-procedure "UNREGISTERED::James Clark//Procedure::all-element-number"))
(define language
  (external-procedure "UNREGISTERED::OpenJade//Procedure::language"))

(declare-default-language (language "ru" "ru.koi8-r"))

(define (process-children-nodata) (process-node-list 
                                   (select-by-missing-property (children (current-node)) 'char)))

(define (has-attribute? attr #!optional (node (current-node)))
  (let ((al (attributes node)))
    (and (named-node-list? al) 
         (not (node-list-empty? (named-node attr al))))))

(define (descendants-with-attr attr #!optional (node (current-node)))
  (select-each n (descendants node) (has-attribute? attr n)))

(define (list-of-attrs aname nl)
  (define (conc l s) (let ((v (attribute-string aname s)))
                       (if (not v)
                           l
                           (if (string=? l "") v
                               (string-append l ", " v)))))
  (node-list-reduce nl conc ""))

(define (map-attr-value proc aname nl)
  (if (node-list-empty? nl)
      #f
      (map-constructor (lambda () (proc (attribute-string aname))) nl)))

(define (map-attr-href prefix aname nl)
  (map-attr-value (lambda (v) 
                    (if v
                        (make element gi: "a"
                              attributes: `(("href" ,(string-append prefix (urlencode v))))
                              (literal v))
                        (empty-sosofo)))
                  aname nl))

(define (get-ref-data refattr n)
  (data (element-with-id (attribute-string refattr n) n)))

(define (abbreviate-name n)
  (define (abbrev i gn) (string-append i (string (string-ref (data gn) 0) #\. #\space)))
  (string-append
   (node-list-reduce (q-element '(persName forename) n) abbrev "")
   (data (q-element '(persName surname) n))))

(define (meta-tag name #!optional (n (current-node))) (make empty-element gi: "meta"
                              attributes: `(("name" ,name)
                                            ("content" ,(data n)))))

(define (paragraph #!optional (contents (empty-sosofo))) (make element gi: "p"
                                                               contents))

(define (centered #!optional (contents (process-children))) 
  (make element gi: "p"
        attributes: '(("align" "center"))
        contents))

(define (division #!optional (contents (process-children)))
  (anchored #f #f (make element gi: "div"
                        heading-level: (+ 1 (inherited-heading-level))
                        contents)))

(define (ruled #!optional (contents (process-children))) (make sequence
                  (make empty-element gi: "hr")
                  (paragraph)
                  contents))
(define (space-after #!optional (contents (process-children)))
  (make sequence
    contents
    (literal " ")))

(define (anchored generate embed #!optional (contents (process-children)))
  (let* ((expid (id (current-node)))
         (realid (cond
                  (expid (string-append "id." expid))
                  (generate (string-append (gi) (number->string (element-number (current-node)))))
                  (else #f))))
    (cond
     ((not realid) contents)
     (embed (make element gi: "a"
                  attributes: `(("name" ,realid))
                  contents))
     (else (make sequence 
             (make element gi: "a"
                   attributes: `(("name" ,realid))
                   (empty-sosofo))
             contents)))))

(define (header #!optional (level #f))
  (paragraph 
   (make element gi: (string-append "h" (number->string (or level (actual-heading-level)))))))

(define (emphstr s) (make element gi: "em"
                          (literal s)))

(define (literal-or-none s)
  (if (string=? s "") #f (literal s)))

(define (string-skip-until s c) 
  (let ((len (string-length s)))
    (let loop ((idx 0))
      (cond 
       ((= len idx) "")
       ((char=? (string-ref s idx) c) (substring s (+ idx 1) len))
       (else (loop (+ 1 idx)))))))

(define (fsid->url fsid) (cond 
                          ((string-ci=? (substring fsid 0 4) "<url") (string-skip-until fsid #\>))
                          ((string-ci=? (substring fsid 0 7) "<osfile")
                           (string-skip-until fsid #\>))
                          (else fsid)))

(define (urlencode url #!optional part)
  (define (encode c) (let ((safe (char-property 'url-safe c)))
                       (if (or (equal? #t safe) (and (list? safe) (member part safe)))
                           (string c)
                           (let ((x (char-property 'external-code c)))
                             (string-append "%" (number->string x 16))))))
  (apply string-append
         (map encode (string->list url))))
  
]]>

